// Generated by CoffeeScript 1.8.0
(function() {
  var Brick, BrickAudio, CheeSynth, Claud, Fixture, Loudspeaker, Param, Visualizer, Wave, brickClasses,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Brick = (function() {
    var tally;

    Brick.prototype.I = 'Brick';

    Brick.prototype.toString = function() {
      return "[object " + I + " " + this.id + "]";
    };

    tally = 0;

    function Brick(opt) {
      this.id = this.I.charAt(0).toLowerCase() + this.zeroPad(++tally);
    }

    Brick.prototype.maintain = function(from, to) {};

    Brick.prototype.connect = function(from, to) {};

    Brick.prototype.disconnect = function(from, to) {};

    Brick.prototype.render = function() {
      return ['.=====.', '|     |', "| " + this.id + " |", '|     |', "'====='"];
    };

    Brick.prototype.zeroPad = function(x, l) {
      if (l == null) {
        l = 2;
      }
      return ('0000000000' + x).substr(-Math.max(l, (x + '').length));
    };

    return Brick;

  })();

  BrickAudio = (function(_super) {
    __extends(BrickAudio, _super);

    function BrickAudio() {
      return BrickAudio.__super__.constructor.apply(this, arguments);
    }

    BrickAudio.prototype.I = 'BrickAudio';

    BrickAudio.prototype.render = function() {
      return ['.L===R.', '|     |', "I " + this.id + " O", '|     |', "'l===r'"];
    };

    return BrickAudio;

  })(Brick);

  CheeSynth = (function() {
    CheeSynth.prototype.toString = function() {
      return '[object CheeSynth]';
    };

    function CheeSynth(opt) {
      if (opt == null) {
        opt = {};
      }
      this.el = opt.el;
      this.width = opt.width || 0;
      this.height = opt.height || 0;
      this.fixtures = [];
      this.connections = {};
      if (CheeSynth.ctx == null) {
        CheeSynth.ctx = new AudioContext;
      }
    }

    CheeSynth.prototype.add = function(x, y, brickClass) {
      var brick;
      brick = new brickClasses[brickClass];
      this.fixtures.push(this[brick.id] = new Fixture({
        id: 'f' + this.fixtures.length,
        x: x,
        y: y,
        brick: brick
      }));
      return this[brick.id];
    };

    CheeSynth.prototype.composite = function() {
      var fixture, key, newConnections, receiver, sender, x, y, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
      this.cb = (function() {
        var _i, _ref, _results;
        _results = [];
        for (x = _i = 1, _ref = this.width; 1 <= _ref ? _i <= _ref : _i >= _ref; x = 1 <= _ref ? ++_i : --_i) {
          _results.push((function() {
            var _j, _ref1, _results1;
            _results1 = [];
            for (y = _j = 1, _ref1 = this.height; 1 <= _ref1 ? _j <= _ref1 : _j >= _ref1; y = 1 <= _ref1 ? ++_j : --_j) {
              _results1.push({});
            }
            return _results1;
          }).call(this));
        }
        return _results;
      }).call(this);
      this.cb.helper = {
        top: {},
        right: [],
        bottom: [],
        left: {}
      };
      _ref = this.fixtures;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        fixture = _ref[_i];
        fixture.insert(this.cb);
      }
      newConnections = {};
      _ref1 = this.cb.helper.bottom;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        sender = _ref1[_j];
        y = sender.y;
        while (this.height > y) {
          y++;
          receiver = this.cb.helper.top[sender.x + ',' + y];
          if (receiver) {
            if (receiver.p) {
              newConnections[sender.f.id + sender.c + '-' + receiver.f.id + receiver.c] = [sender, receiver];
              y = sender.y + 1;
              while (receiver.y > y) {
                this.cb[sender.x][y].c = '|';
                y++;
              }
            }
            break;
          }
        }
      }
      _ref2 = this.cb.helper.right;
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        sender = _ref2[_k];
        x = sender.x;
        while (this.width > x) {
          x++;
          receiver = this.cb.helper.left[x + ',' + sender.y];
          if (receiver) {
            if (receiver.p) {
              newConnections[sender.f.id + sender.c + '-' + receiver.f.id + receiver.c] = [sender, receiver];
              x = sender.x + 1;
              while (receiver.x > x) {
                this.cb[x][sender.y].c = '|' === this.cb[x][sender.y].c ? '+' : '—';
                x++;
              }
            }
            break;
          }
        }
      }
      _ref3 = this.connections;
      for (key in _ref3) {
        _ref4 = _ref3[key], sender = _ref4[0], receiver = _ref4[1];
        if (newConnections[key]) {
          sender.f.brick.maintain(sender, receiver);
          receiver.f.brick.maintain(sender, receiver);
        } else {
          sender.f.brick.disconnect(sender, receiver);
          receiver.f.brick.disconnect(sender, receiver);
        }
      }
      for (key in newConnections) {
        _ref5 = newConnections[key], sender = _ref5[0], receiver = _ref5[1];
        if (!this.connections[key]) {
          sender.f.brick.connect(sender, receiver);
          receiver.f.brick.connect(sender, receiver);
        }
      }
      return this.connections = newConnections;
    };

    CheeSynth.prototype.render = function() {
      var c, out, x, y, _i, _j, _ref, _ref1;
      this.composite();
      out = '';
      for (y = _i = 0, _ref = this.height - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; y = 0 <= _ref ? ++_i : --_i) {
        for (x = _j = 0, _ref1 = this.width - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
          c = this.cb[x][y].c;
          out += c ? c : 'x';
        }
        out += '\n';
      }
      if (this.el) {
        this.el.innerHTML = out;
      }
      return out;
    };

    return CheeSynth;

  })();

  Claud = (function() {
    Claud.prototype.toString = function() {
      return '[object Claud]';
    };

    function Claud(opt) {
      if (opt == null) {
        opt = {};
      }
      this.keydown = __bind(this.keydown, this);
      this.log = new Filog({
        selector: opt.selectors.out,
        console: false
      }).log;
      this["in"] = document.querySelector(opt.selectors["in"]);
      this["in"].setAttribute('contenteditable', 'true');
      this["in"].addEventListener('keydown', this.keydown);
      this.commands = [];
      this.pointer = 0;
    }

    Claud.prototype.add = function(line) {
      this.pointer = (this.commands.push(this.log(line))) - 1;
      return this;
    };

    Claud.prototype.run = function() {
      var e;
      try {
        return eval(this.commands[this.commands.length - 1]);
      } catch (_error) {
        e = _error;
        this.log(e);
        return console.log(e);
      }
    };

    Claud.prototype.keydown = function(evt) {
      switch (evt.keyCode) {
        case 13:
          this.pointer = (this.commands.push(this.log(this["in"].textContent))) - 1;
          this["in"].innerHTML = '';
          this.run();
          return evt.preventDefault();
        case 38:
          this.pointer = Math.max(0, this.pointer - 1);
          this["in"].innerHTML = this.commands[this.pointer];
          return evt.preventDefault();
        case 40:
          this.pointer = Math.min(this.commands.length - 1, this.pointer + 1);
          this["in"].innerHTML = this.commands[this.pointer];
          return evt.preventDefault();
      }
    };

    return Claud;

  })();

  window.Claud = Claud;

  Fixture = (function() {
    Fixture.prototype.toString = function() {
      return "[object Fixture " + this.id + "]";
    };

    function Fixture(opt) {
      this.id = opt.id;
      this.x = opt.x;
      this.y = opt.y;
      this.brick = opt.brick;
    }

    Fixture.prototype.insert = function(cb) {
      var absX, absY, char, col, isBottom, isLeft, isRight, isTop, line, lines, meta, x, y, _i, _j, _len, _len1, _ref;
      if (0 > this.x || 0 > this.y) {
        throw new Error("" + this + " has -ve position");
      }
      if (!cb[this.x]) {
        throw new Error("" + this + " is beyond x edge");
      }
      if (!cb[this.x][this.y]) {
        throw new Error("" + this + " is beyond y edge");
      }
      lines = this.brick.render();
      for (y = _i = 0, _len = lines.length; _i < _len; y = ++_i) {
        line = lines[y];
        absY = this.y + y;
        if (!cb[this.x][absY]) {
          throw new Error("" + this + " is too tall");
        }
        _ref = line.split('');
        for (x = _j = 0, _len1 = _ref.length; _j < _len1; x = ++_j) {
          char = _ref[x];
          absX = this.x + x;
          col = cb[absX];
          if (!col) {
            throw new Error("" + this + " is too wide");
          }
          if (col[absY].f) {
            throw new Error("" + this + " overlaps " + col[absY].f);
          }
          meta = col[absY] = {
            f: this,
            c: char,
            x: absX,
            y: absY
          };
          isTop = 0 === y;
          isLeft = 0 === x;
          isBottom = lines.length - 1 === y;
          isRight = line.length - 1 === x;
          if (isTop || isRight || isBottom || isLeft) {
            meta.p = /[a-zA-Z]/.test(char);
            if (isTop) {
              cb.helper.top[absX + ',' + absY] = meta;
            }
            if (isLeft) {
              cb.helper.left[absX + ',' + absY] = meta;
            }
            if (meta.p) {
              if (isRight) {
                cb.helper.right.push(meta);
              }
              if (isBottom) {
                cb.helper.bottom.push(meta);
              }
            }
          }
        }
      }
    };

    return Fixture;

  })();

  Loudspeaker = (function(_super) {
    __extends(Loudspeaker, _super);

    Loudspeaker.prototype.I = 'Loudspeaker';

    function Loudspeaker(opt) {
      if (opt == null) {
        opt = {};
      }
      Loudspeaker.__super__.constructor.apply(this, arguments);
    }

    Loudspeaker.prototype.render = function() {
      return ['.L===R.', '|     |', "I " + this.id + " O", '|     |', "'====='"];
    };

    return Loudspeaker;

  })(BrickAudio);

  Param = (function(_super) {
    __extends(Param, _super);

    Param.prototype.I = 'Param';

    function Param(opt) {
      Param.__super__.constructor.apply(this, arguments);
      this.O = 0;
    }

    Param.prototype.render = function() {
      return [".=" + (this.zeroPad(this.O, 3)) + "=.", "| " + this.id + " O", "'====='"];
    };

    return Param;

  })(Brick);

  Visualizer = (function(_super) {
    __extends(Visualizer, _super);

    Visualizer.prototype.I = 'Visualizer';

    function Visualizer(opt) {
      if (opt == null) {
        opt = {};
      }
      Visualizer.__super__.constructor.apply(this, arguments);
      this.isAnalyzing = false;
      this.analyzer = CheeSynth.ctx.createAnalyser();
      this.analyzer.fftSize = 512;
      this.bufferLength = this.analyzer.frequencyBinCount;
      this.dataArray = new Uint8Array(this.bufferLength);
    }

    Visualizer.prototype.connect = function(from, to) {
      if ('Wave' === from.f.brick.I) {
        this.isAnalyzing = true;
        from.f.brick.oscillator.connect(this.analyzer);
      }
      if ('Loudspeaker' === to.f.brick.I) {
        return this.analyzer.connect(CheeSynth.ctx.destination);
      }
    };

    Visualizer.prototype.disconnect = function(from, to) {
      if ('Wave' === from.f.brick.I) {
        this.isAnalyzing = false;
        from.f.brick.oscillator.disconnect(this.analyzer);
      }
      if ('Loudspeaker' === to.f.brick.I) {
        return this.analyzer.disconnect(CheeSynth.ctx.destination);
      }
    };

    Visualizer.prototype.render = function() {
      var chunk, data, high, i, j, low, _i, _j, _ref, _ref1;
      if (!this.isAnalyzing) {
        return ['.======L===R======.', "|                 |", "|                 |", "|                 |", "|       " + this.id + "       |", "'======L===R======'"];
      }
      this.analyzer.getByteTimeDomainData(this.dataArray);
      this.wlt = [];
      this.wlc = [];
      this.wlb = [];
      chunk = this.dataArray.length / 16;
      for (i = _i = 0; _i <= 15; i = ++_i) {
        high = 128;
        low = 128;
        for (j = _j = _ref = i * chunk, _ref1 = (i + 1) * chunk - 1; _ref <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = _ref <= _ref1 ? ++_j : --_j) {
          data = this.dataArray[j];
          high = Math.max(high, data);
          low = Math.min(low, data);
        }
        this.wlt[i] = this.wlc[i] = this.wlb[i] = ' ';
        if (213 < high) {
          this.wlc[i] = '╹';
          this.wlt[i] = '╏';
        } else if (170 < high) {
          this.wlc[i] = '╹';
          this.wlt[i] = '╻';
        } else if (128 < high) {
          this.wlc[i] = '╹';
        }
        if (42 > low) {
          this.wlc[i] = '╹' === this.wlc[i] ? '╏' : '╻';
          this.wlb[i] = '╏';
        } else if (85 > low) {
          this.wlc[i] = '╹' === this.wlc[i] ? '╏' : '╻';
          this.wlb[i] = '╹';
        } else if (128 > low) {
          this.wlc[i] = '╹' === this.wlc[i] ? '╏' : '╻';
        }
      }
      return ['.======L===R======.', "| " + (this.wlt.join('')) + "|", "|l" + (this.wlc.join('')) + "|", "| " + (this.wlb.join('')) + "|", "|       " + this.id + "       |", "'======L===R======'"];
    };

    return Visualizer;

  })(BrickAudio);

  Wave = (function(_super) {
    __extends(Wave, _super);

    Wave.prototype.I = 'Wave';

    function Wave(opt) {
      if (opt == null) {
        opt = {};
      }
      Wave.__super__.constructor.apply(this, arguments);
      this.oscillator = CheeSynth.ctx.createOscillator();
      this.oscillator.type = opt.type || 'triangle';
      this.oscillator.frequency.value = opt.freq || 70;
      this.oscillator.start();
    }

    Wave.prototype.maintain = function(from, to) {
      if ('Param' === from.f.brick.I) {
        if ('F' === to.c) {
          return this.oscillator.frequency.value = from.f.brick.O;
        }
      }
    };

    Wave.prototype.connect = function(from, to) {
      if ('Loudspeaker' === to.f.brick.I) {
        this.oscillator.connect(CheeSynth.ctx.destination);
      }
      if ('Param' === from.f.brick.I) {
        if ('F' === to.c) {
          return this.oscillator.frequency.value = from.f.brick.O;
        }
      }
    };

    Wave.prototype.disconnect = function(from, to) {
      if ('Loudspeaker' === to.f.brick.I) {
        return this.oscillator.disconnect(CheeSynth.ctx.destination);
      }
    };

    Wave.prototype.render = function() {
      return ['.=====.', '|     |', "F " + this.id + " F", '|     |', "'L===R'"];
    };

    return Wave;

  })(BrickAudio);

  window.CheeSynth = CheeSynth;

  brickClasses = {
    Brick: Brick,
    BrickAudio: BrickAudio,
    Loudspeaker: Loudspeaker,
    Param: Param,
    Visualizer: Visualizer,
    Wave: Wave
  };

}).call(this);
